package play

import (
	"os"
	"path/filepath"
	"strings"

	"github.com/sirupsen/logrus"
	"gitlab.com/youtopia.earth/ops/snip/errors"
)

type CfgCmd struct {
	CfgPlay *CfgPlay

	Command string
	Args    []string
	Vars    map[string]string

	Depth      int
	IsMD       bool
	MDPath     string
	Markdown   string
	CodeBlocks []*CodeBlock
}

type CodeBlockType int

const (
	CodeBlockBash CodeBlockType = iota
)

type CodeBlock struct {
	Type    CodeBlockType
	Content string
}

func (ccmd *CfgCmd) Parse(c []string) {
	if len(c) < 1 {
		return
	}
	command := c[0]
	ccmd.IsMD = strings.HasSuffix(command, ".md")
	if ccmd.IsMD {
		ccmd.MDPath = command
		ccmd.BuildBashFromMD()
	} else {
		ccmd.Command = command
	}
	if len(c) > 1 {
		ccmd.Args = c[1:]
	}
}

func (ccmd *CfgCmd) BuildBashFromMD() {
	app := ccmd.CfgPlay.App

	ParseMarkdownFile(app, ccmd.MDPath, ccmd)

	cfg := app.GetConfig()
	now := app.GetNow()
	nowText := now.Format("2006-01-02 15:04:05")

	file := cfg.BuildDir + "/snippets/" + ccmd.MDPath + ".bash"
	dir := filepath.Dir(file)
	os.MkdirAll(dir, os.ModePerm)

	f, err := os.OpenFile(file, os.O_APPEND|os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0755)
	errors.Check(err)
	defer f.Close()
	outputAppend := func(str string) {
		_, err := f.WriteString(str)
		errors.Check(err)
	}

	outputAppend("#!/usr/bin/env bash\n\n")
	outputAppend("# play snippet: " + ccmd.MDPath + "\n")
	outputAppend("# generated by snip on " + nowText + "\n\n")
	outputAppend("set -e\n\n")

	for _, codeBlock := range ccmd.CodeBlocks {
		content := codeBlock.Content
		content = strings.Trim(content, "\n")
		outputAppend(content + "\n")
	}
	logrus.Debugf("writed bash from md to %v", file)

	ccmd.Command = file
}

func (ccmd *CfgCmd) Build(ctx *RunCtx, parentLoopRow *LoopRow) *Cmd {
	cmd := &Cmd{
		ParentLoopRow: parentLoopRow,
		CfgCmd:        ccmd,
		Command:       ccmd.Command,
		Args:          ccmd.Args,
		IsMD:          ccmd.IsMD,
		Depth:         ccmd.Depth,
	}

	depth := ccmd.Depth
	if parentLoopRow.IsLoopRowItem {
		depth = depth + 1
	}
	cmd.Indent = strings.Repeat("  ", depth+1)

	vars := make(map[string]string)
	for k, v := range ctx.VarsDefault.Items() {
		vars[k] = v.(string)
	}
	for k, v := range ctx.Vars.Items() {
		vars[k] = v.(string)
	}
	cmd.Vars = vars

	logKey := cmd.GetTreeKey()

	logger := logrus.WithFields(logrus.Fields{
		"tree": logKey,
	})

	cmd.Logger = logger

	return cmd
}

func unexpectedTypeCmd(m map[string]interface{}, key string) {
	errors.UnexpectedType(m, key, "cmd")
}
