package cmd

import (
	"fmt"
	"os"
	"strings"
	"time"

	"github.com/spf13/cobra"

	"gitlab.com/youtopia.earth/ops/snip/config"
	"gitlab.com/youtopia.earth/ops/snip/errors"
	"gitlab.com/youtopia.earth/ops/snip/play"
)

func CmdBash(app App, rootCmd *cobra.Command) *cobra.Command {

	var cmd = &cobra.Command{
		Use:   "bash",
		Short: "Generates bash scripts",
		Args:  cobra.ExactArgs(0),
		PreRun: func(cmd *cobra.Command, args []string) {
			app.OnPreRun(cmd)
		},
		Run: func(cmd *cobra.Command, args []string) {
			cfg := app.GetConfig()
			playbook := cfg.Playbook

			outputToFile := (cfg.BashOutput != "")

			var outputAppend func(string)

			var f *os.File
			if outputToFile {
				var err error
				f, err = os.OpenFile(cfg.BashOutput, os.O_APPEND|os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
				errors.Check(err)
				defer f.Close()
				outputAppend = func(str string) {
					_, err := f.WriteString(str)
					errors.Check(err)
				}
			} else {
				outputAppend = func(str string) {
					fmt.Print(str)
				}
			}

			outputAppend("#!/usr/bin/env bash\n\n")
			outputAppend("# Generated by snip on " + time.Now().Format("2006-01-02 15:04:05") + "\n\n")
			outputAppend("set -e\n\n")

			playBook := make([]*play.Play, len(playbook))
			for i, playI := range playbook {
				playBook[i] = play.ParseInterface(playI, app)
			}

			for _, p := range playBook {
				outputAppend("# play: " + p.Name + "\n")
				outputAppend(p.FuncName + "()\n{\n")
				for _, codeBlock := range p.CodeBlocks {
					content := codeBlock.Content
					content = strings.Trim(content, "\n")
					// content = tools.IndentBash(content, "  ")
					outputAppend(content)
					outputAppend("\n")
				}
				outputAppend("}\n\n")
			}

			outputAppend("# playbook \n\n")
			outputAppend("main()\n{ \n\n")
			for _, p := range playBook {
				outputAppend("  " + p.FuncName + " \n")
			}
			outputAppend("\n} \n")

		},
	}

	flags := cmd.Flags()
	flags.StringP("output", "o", config.FlagOutputDefault, config.FlagOutputDesc)
	flags.StringP("snippets-dir", "", config.FlagSnippetsDirDefault, config.FlagSnippetsDirDesc)

	return cmd
}
