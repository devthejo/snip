image: golang:1.18-buster

stages:
  - release

before_script:
  - export GOPATH=${CI_PROJECT_DIR}/.cache
  - export GOARCH=amd64
  - export OSS="linux darwin"
  - export BASEURL="https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}"

release:
  stage: release
  script:
    - for os in ${OSS}; do GOOS=$os GOARCH=${GOARCH} make cross; done
    - apt-get update -qq && apt-get -qq -y install curl jq
    - |
      set -e
      progname=snip
      for os in ${OSS}
      do
        fullname="${progname}_${CI_COMMIT_TAG}_${os}_${GOARCH}"
        # linkname="${fullname}\ (SHA256 $(cut -f1 -d' ' ${fullname}.sha256))"
        linkname="${fullname}"

        linkurl="${BASEURL}/jobs/${CI_JOB_ID}/artifacts/${fullname}"

        # curl --request POST --header "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" --form "file=@$fullname" "https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/uploads"
        linklist="${linklist}{\"name\": \"${linkname}\", \"url\": \"${linkurl}\"}"
      done
      links="[$(echo ${linklist}|sed 's/}{/}, {/g')]"

      descr="$(curl --fail -H \"PRIVATE-TOKEN:\ ${PRIVATE_TOKEN}\" ${BASEURL}/repository/tags/${CI_COMMIT_TAG}|jq -r '.message')"

      DATA="
      {
        \"name\": \"${progname} version ${CI_COMMIT_TAG}\",
        \"description\": \"${descr}\",
        \"tag_name\": \"${CI_COMMIT_TAG}\",
        \"assets\": {
          \"links\": "${links}"
        }
      }
      "
      curl --fail -H 'Content-Type: application/json' -X POST -H "PRIVATE-TOKEN: ${PRIVATE_TOKEN}" "${BASEURL}/releases" -d "${DATA}"

  artifacts:
    paths:
      - snip_*
  only:
    - tags